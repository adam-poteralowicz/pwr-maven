package eu.jpereira.trainings.designpatterns.structural.adapter.thirdparty;

import eu.jpereira.trainings.designpatterns.structural.adapter.exceptions.CodeMismatchException;
import eu.jpereira.trainings.designpatterns.structural.adapter.exceptions.IncorrectDoorCodeException;
import eu.jpereira.trainings.designpatterns.structural.adapter.model.Door;
import eu.jpereira.trainings.designpatterns.structural.adapter.thirdparty.exceptions.CannotChangeStateOfLockedDoor;
import eu.jpereira.trainings.designpatterns.structural.adapter.thirdparty.exceptions.CannotUnlockDoorException;

public class ThirdPartyDoorAdaper extends ThirdPartyDoor implements Door {

	@Override
	public void open(String code) throws IncorrectDoorCodeException {
		try {
			this.unlock(code);
		} catch (CannotUnlockDoorException e1) {
			throw new IncorrectDoorCodeException();
		}
	}

	@Override
	public void close() {
	
	//	try {
			//setState(DoorState.CLOSED);
		//} //catch (CannotChangeStateOfLockedDoor e) {
			// TODO Auto-generated catch block
	
	//	}
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean isOpen() {
		// TODO Auto-generated method stub
		if (getState().equals( DoorState.OPEN))
			return true;
		else
			return false;
	}

	@Override
	public void changeCode(String oldCode, String newCode,
			String newCodeConfirmation) throws IncorrectDoorCodeException,
			CodeMismatchException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean testCode(String code) {
		// TODO Auto-generated method stub
		return false;
	}

}
